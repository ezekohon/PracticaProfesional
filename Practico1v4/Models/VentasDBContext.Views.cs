//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Practico1v4.Models.VentasDBContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsb153103bf85106e65ab9c3d69b0d4765771b8e609759cbe7a21dc8df78e13b5a))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsb153103bf85106e65ab9c3d69b0d4765771b8e609759cbe7a21dc8df78e13b5a : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "b153103bf85106e65ab9c3d69b0d4765771b8e609759cbe7a21dc8df78e13b5a"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.AuditEntry")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.AuditEntryProperty")
            {
                return GetView1();
            }

            if (extentName == "VentasDBContext.AuditEntries")
            {
                return GetView2();
            }

            if (extentName == "VentasDBContext.AuditEntryProperties")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.PuntoDeVenta")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.Vendedor")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Zona")
            {
                return GetView6();
            }

            if (extentName == "VentasDBContext.PuntosDeVenta")
            {
                return GetView7();
            }

            if (extentName == "VentasDBContext.Vendedores")
            {
                return GetView8();
            }

            if (extentName == "VentasDBContext.Zonas")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.Rol")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.Usuario")
            {
                return GetView11();
            }

            if (extentName == "VentasDBContext.Roles")
            {
                return GetView12();
            }

            if (extentName == "VentasDBContext.Usuarios")
            {
                return GetView13();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AuditEntry.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuditEntry
        [CodeFirstDatabaseSchema.AuditEntry](T1.AuditEntry_AuditEntryID, T1.AuditEntry_EntitySetName, T1.AuditEntry_EntityTypeName, T1.AuditEntry_State, T1.AuditEntry_StateName, T1.AuditEntry_CreatedBy, T1.AuditEntry_CreatedDate)
    FROM (
        SELECT 
            T.AuditEntryID AS AuditEntry_AuditEntryID, 
            T.EntitySetName AS AuditEntry_EntitySetName, 
            T.EntityTypeName AS AuditEntry_EntityTypeName, 
            CAST(T.State AS [Edm.Int32]) AS AuditEntry_State, 
            T.StateName AS AuditEntry_StateName, 
            T.CreatedBy AS AuditEntry_CreatedBy, 
            T.CreatedDate AS AuditEntry_CreatedDate, 
            True AS _from0
        FROM VentasDBContext.AuditEntries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.AuditEntryProperty.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuditEntryProperty
        [CodeFirstDatabaseSchema.AuditEntryProperty](T1.AuditEntryProperty_AuditEntryPropertyID, T1.AuditEntryProperty_AuditEntryID, T1.AuditEntryProperty_RelationName, T1.AuditEntryProperty_PropertyName, T1.AuditEntryProperty_OldValue, T1.AuditEntryProperty_NewValue)
    FROM (
        SELECT 
            T.AuditEntryPropertyID AS AuditEntryProperty_AuditEntryPropertyID, 
            T.AuditEntryID AS AuditEntryProperty_AuditEntryID, 
            T.RelationName AS AuditEntryProperty_RelationName, 
            T.PropertyName AS AuditEntryProperty_PropertyName, 
            T.OldValueFormatted AS AuditEntryProperty_OldValue, 
            T.NewValueFormatted AS AuditEntryProperty_NewValue, 
            True AS _from0
        FROM VentasDBContext.AuditEntryProperties AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for VentasDBContext.AuditEntries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuditEntries
        [Practico1v4.Models.AuditEntry](T1.AuditEntry_AuditEntryID, T1.AuditEntry_CreatedBy, T1.AuditEntry_CreatedDate, T1.AuditEntry_EntitySetName, T1.AuditEntry_EntityTypeName, T1.AuditEntry_State, T1.AuditEntry_StateName)
    FROM (
        SELECT 
            T.AuditEntryID AS AuditEntry_AuditEntryID, 
            T.CreatedBy AS AuditEntry_CreatedBy, 
            T.CreatedDate AS AuditEntry_CreatedDate, 
            T.EntitySetName AS AuditEntry_EntitySetName, 
            T.EntityTypeName AS AuditEntry_EntityTypeName, 
            CAST(T.State AS [Practico1v4.Models.AuditEntryState]) AS AuditEntry_State, 
            T.StateName AS AuditEntry_StateName, 
            True AS _from0
        FROM CodeFirstDatabase.AuditEntry AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for VentasDBContext.AuditEntryProperties.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AuditEntryProperties
        [Practico1v4.Models.AuditEntryProperty](T1.AuditEntryProperty_AuditEntryPropertyID, T1.AuditEntryProperty_AuditEntryID, T1.AuditEntryProperty_PropertyName, T1.AuditEntryProperty_RelationName, T1.AuditEntryProperty_NewValueFormatted, T1.AuditEntryProperty_OldValueFormatted)
    FROM (
        SELECT 
            T.AuditEntryPropertyID AS AuditEntryProperty_AuditEntryPropertyID, 
            T.AuditEntryID AS AuditEntryProperty_AuditEntryID, 
            T.PropertyName AS AuditEntryProperty_PropertyName, 
            T.RelationName AS AuditEntryProperty_RelationName, 
            T.NewValue AS AuditEntryProperty_NewValueFormatted, 
            T.OldValue AS AuditEntryProperty_OldValueFormatted, 
            True AS _from0
        FROM CodeFirstDatabase.AuditEntryProperty AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PuntoDeVenta.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PuntoDeVenta
        [CodeFirstDatabaseSchema.PuntoDeVenta](T1.PuntoDeVenta_Id, T1.PuntoDeVenta_Descripcion)
    FROM (
        SELECT 
            T.Id AS PuntoDeVenta_Id, 
            T.Descripcion AS PuntoDeVenta_Descripcion, 
            True AS _from0
        FROM VentasDBContext.PuntosDeVenta AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Vendedor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Vendedor
        [CodeFirstDatabaseSchema.Vendedor](T1.Vendedor_Id, T1.Vendedor_PuntoDeVentaId, T1.Vendedor_Nombre, T1.Vendedor_Apellido, T1.Vendedor_ZonaId)
    FROM (
        SELECT 
            T.Id AS Vendedor_Id, 
            T.PuntoDeVentaId AS Vendedor_PuntoDeVentaId, 
            T.Nombre AS Vendedor_Nombre, 
            T.Apellido AS Vendedor_Apellido, 
            T.ZonaId AS Vendedor_ZonaId, 
            True AS _from0
        FROM VentasDBContext.Vendedores AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Zona.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Zona
        [CodeFirstDatabaseSchema.Zona](T1.Zona_Id, T1.Zona_Descripcion)
    FROM (
        SELECT 
            T.Id AS Zona_Id, 
            T.Descripcion AS Zona_Descripcion, 
            True AS _from0
        FROM VentasDBContext.Zonas AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for VentasDBContext.PuntosDeVenta.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PuntosDeVenta
        [Practico1v4.Models.PuntoDeVenta](T1.PuntoDeVenta_Id, T1.PuntoDeVenta_Descripcion)
    FROM (
        SELECT 
            T.Id AS PuntoDeVenta_Id, 
            T.Descripcion AS PuntoDeVenta_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.PuntoDeVenta AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for VentasDBContext.Vendedores.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Vendedores
        [Practico1v4.Models.Vendedor](T1.Vendedor_Id, T1.Vendedor_PuntoDeVentaId, T1.Vendedor_Nombre, T1.Vendedor_Apellido, T1.Vendedor_ZonaId)
    FROM (
        SELECT 
            T.Id AS Vendedor_Id, 
            T.PuntoDeVentaId AS Vendedor_PuntoDeVentaId, 
            T.Nombre AS Vendedor_Nombre, 
            T.Apellido AS Vendedor_Apellido, 
            T.ZonaId AS Vendedor_ZonaId, 
            True AS _from0
        FROM CodeFirstDatabase.Vendedor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for VentasDBContext.Zonas.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Zonas
        [Practico1v4.Models.Zona](T1.Zona_Id, T1.Zona_Descripcion)
    FROM (
        SELECT 
            T.Id AS Zona_Id, 
            T.Descripcion AS Zona_Descripcion, 
            True AS _from0
        FROM CodeFirstDatabase.Zona AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Rol.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Rol
        [CodeFirstDatabaseSchema.Rol](T1.Rol_Id, T1.Rol_Nombre, T1.Rol_Privilegio)
    FROM (
        SELECT 
            T.Id AS Rol_Id, 
            T.Nombre AS Rol_Nombre, 
            T.Privilegio AS Rol_Privilegio, 
            True AS _from0
        FROM VentasDBContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Usuario.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Usuario
        [CodeFirstDatabaseSchema.Usuario](T1.Usuario_Id, T1.Usuario_Username, T1.Usuario_Password, T1.Usuario_RolId)
    FROM (
        SELECT 
            T.Id AS Usuario_Id, 
            T.Username AS Usuario_Username, 
            T.Password AS Usuario_Password, 
            T.RolId AS Usuario_RolId, 
            True AS _from0
        FROM VentasDBContext.Usuarios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for VentasDBContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [Practico1v4.Models.Rol](T1.Rol_Id, T1.Rol_Nombre, T1.Rol_Privilegio)
    FROM (
        SELECT 
            T.Id AS Rol_Id, 
            T.Nombre AS Rol_Nombre, 
            T.Privilegio AS Rol_Privilegio, 
            True AS _from0
        FROM CodeFirstDatabase.Rol AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for VentasDBContext.Usuarios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Usuarios
        [Practico1v4.Models.Usuario](T1.Usuario_Id, T1.Usuario_Username, T1.Usuario_Password, T1.Usuario_RolId)
    FROM (
        SELECT 
            T.Id AS Usuario_Id, 
            T.Username AS Usuario_Username, 
            T.Password AS Usuario_Password, 
            T.RolId AS Usuario_RolId, 
            True AS _from0
        FROM CodeFirstDatabase.Usuario AS T
    ) AS T1");
        }
    }
}
